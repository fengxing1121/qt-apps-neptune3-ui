/****************************************************************************
**
** Copyright (C) 2019 Luxoft Sweden AB
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Neptune module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL-QTAS$
** Commercial License Usage
** Licensees holding valid commercial Qt Automotive Suite licenses may use
** this file in accordance with the commercial license agreement provided
** with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and The Qt Company.  For
** licensing terms and conditions see https://www.qt.io/terms-conditions.
** For further information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\example neptune3ui/parking-app-tutorial/chapter1-basics
\brief Provides step-by-step instructions on how to develop a parking app for Neptune 3 UI.
\ingroup neptune3ui-examples
\title Develop a Parking App Step-by-Step
\image parking-app.png

\section1 Introduction

This example shows you how to build a Parking App step-by-step with some static data to display
the number of parking lots available in a particular area.

\section1 Implement the App

In our \c{Main.qml} file, we start out by importing the modules that we need. Apart from Qt Quick,
there are some mandatory imports that we require.

\list
    \li \c{application.windows} - is necessary for the ApplicationCCWindow
    \li \c{shared.Sizes} - is an attached property that holds some size numbers for Neptune 3 UI
    \li \c{shared.animations} - is necessary for some animations in Neptune 3 UI
\endlist

\snippet ../examples/neptune3ui/parking-app-tutorial/chapter1-basics/Main.qml implement app 1

As its root element, we use \l{ApplicationCCWindow}, because the Parking app is shown in the Center
Console. On top of the ApplicationCCWindow, there's an Item that holds the content. When the app is
launched, we use some dedicated APIs to a reserve a rectangular area in the Center Console.

The \c{exposedRect} property holds the area of the window that is exposed to the user. This is the
area that is not occupied by other UI elements.

Once the application has reserved this area, you can start working on the UI. There are some
properties that you can use from the existing ones attached as well as Neptune 3 UI animations.
Among them are:

\table
    \header
        \li Property
        \li Description
    \row
        \li Sizes
        \li \c{Sizes.dp()} is a function to retain the UI pixel density when Neptune 3 UI's windows
            are being resized. This function convertd pixel values from the reference pixel density
            to the current density. Additionally, \c{Sizes.dp()} applies the current scale factor
            to the given pixel value, effectively converting it into device pixels (dp). Sometimes,
            this function can also round up the pixels to the nearest integer, to minimize aliasing
            artifacts.
            \note Some font sizes, such as \c fontSizeXXS, \c fontSizeXS, \c fontSizeS,
            \c fontSizeM, \c fontSizeL, and \c fontSizeXXL, have some predefined values based on
            Neptune 3 UI's design.
    \row
        \li Style
        \li \c{Style} is an attached property that provides values related to the UI style, such as
            the currently selected theme, colors, and opacity levels.
    \row
        \li Animations
        \li There are a few default animations and smoothed animations that you can use when you
            need to apply this behavior to th UI. They hold some predefined values to keep a
            uniform animation for any moving objects, in Neptune 3 UI.
\endtable

Typically, Neptune 3 UI applications are divided into two parts: top content and bottom content.
This is the same design philosophy we use for the \l{Music App} and \l{Calendar App}. Now, for the
Parking App:
\list
    \li the top content is for the parking ticket
    \li the bottom content is to display details
\endlist

\section2 Fill in the Top Content

Since the top content has a background, we use \c Image as its root and set the background source.
To return the correct image source, we use \c{Style.image("app-fullscreen-top-bg", Style.theme)}.
\c{Style.image()} is a function that requires an image file name and current selected theme. In
Neptune 3 UI, we support two themes: dark (the default) and light. For each asset we use, we have
to provide two files to be able to support themes.

\snippet ../examples/neptune3ui/parking-app-tutorial/chapter1-basics/Main.qml top content

Then, we add some details when there's no active parking ticket purchased. If there's an active
ticket available, we display that ticket asset. Based on Neptune 3 UI's design, we need to animate
the ticket, when it starts being active, by moving it from right to left. This is achieved via the
following lines:

\snippet ../examples/neptune3ui/parking-app-tutorial/chapter1-basics/Main.qml ticket animation

We use the DefaultNumberAnimation{}, a predefined animation to support our requirement. The
\c parkingStarted property is enabled when the parking ticket is active. This property applies the
ticket margins to the ticket and its behavior, that we also define in that component.

\section2 Fill in the Bottom Content

The bottom content displays details on the parking ticket, such as parking zones, prices, location,
as well as the start button to start the parking ticket. We use \l{Row} and \l{Column} component to
place all the required labels.


\snippet ../examples/neptune3ui/parking-app-tutorial/chapter1-basics/Main.qml bottom content

In the code snippet above, the \c{start button} is an interesting part. Since Neptune 3 UI mostly
uses QtQuickControls 2, we can predefine a default style for all of the buttons. However, in this
Parking App, we customize our button and use a background that has different colors and behavior.

\note To view the types of buttons available, run Neptune 3 UI and start the \b{Sheets App}.

\section2 Add a Manifest File

When we're ready to run the app, we need to add an \c{info.yaml} manifest file that contains the
lines below:

\quotefile ../examples/neptune3ui/parking-app-tutorial/chapter1-basics/info.yaml

We need to specify an icon for the Parking App, to display in the App Launcher, together with
the other apps, once it's installed in the System UI. For more information on \c {info.yaml}, see
\l{Neptune 3 UI - App Development} and \l{Manifest Definition}.

\section2 Add a Project File

Next, we also need to create a project file, \c{.pro}, that speciifies the Parking App project as
follows:

\quotefile ../examples/neptune3ui/parking-app-tutorial/chapter1-basics/chapter1-basics.pro

If you use Qt Creator and have the \l{Qt Creator Plugin for Qt Application Manager} installed, your app can be
deployed and run directly in Neptune 3 UI's System UI. To do that, follow these steps:

\list
    \li Open your \c{.pro} file in Qt Creator.
    \li In the \uicontrol Projects view, under \uicontrol Build & Run, select \uicontrol Run.
        Verify that your configuration values match the values shown below:
        \image run-settings.png
\endlist

When the project is prepared, press \uicontrol{Ctrl+R} to run the Parking App in Neptune 3 UI.

\note Before you can deploy and run the Parking App, make sure that Neptune 3 UI is completely running.


*/
