/****************************************************************************
**
** Copyright (C) 2019 Luxoft Sweden AB
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Neptune 3 IVI UI.
**
** $QT_BEGIN_LICENSE:FDL-QTAS$
** Commercial License Usage
** Licensees holding valid commercial Qt Automotive Suite licenses may use
** this file in accordance with the commercial license agreement provided
** with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and The Qt Company.  For
** licensing terms and conditions see https://www.qt.io/terms-conditions.
** For further information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
   \page neptune3ui-middleware.html
   \title Neptune 3 UI - Middleware
   \brief Describes Neptune 3 UI's middleware implementation.

   Neptune 3 UI's middleware shows how you can implement and use the middleware services in
   Qt Automotive Suite.

   The apps and the System UI share common settings, such as language and day or night mode, over a
   separate backend server process. Additionally the server holds the instrument cluster's gauge
   and telltale values. Having the backend as a separate network process makes it possible for
   all of the independent apps to access common information in a standard way. This separation also
   makes it possible to run the \l{instrument cluster} and the \l{center console display} on
   separate hosts, while retaining a smooth, synchronous change between languages, themes or UI
   modes.

   The individual apps and System UI connect to the middleware service through the module's
   auto-generated API. In the background, the module loads a plugin that implements the actual
   connection to the backend server process. The fact that the service is remote is transparent to
   the UI code. Additionally, due to the interchangeable QtIvi plugins, the service is implemented
   in an entirely different manner. For example, if Neptune 3 UI is run in single-process mode, the
   middleware service wouldn't need to be remote, but could be running in-process instead.

   By default, Neptune 3 UI starts the middleware automatically; but you can also start it by
   running the \c middleware executable. The executable is installed or built when Neptune 3 UI is
   built. The server needs a settings file, \c server.conf, to set up the connection. This file is
   shipped with Neptune 3 UI and is located in the root directory. The same file is also read by
   the backend plugin instances that each individual app loads.

   For more information on these backends, see \l{QtIvi Remote Backends} and
   \l{Qt IVI Generator Remote Objects Example}.

   \section1 Drive Data

   In Neptune 3 UI, the instrument cluster's gauge and telltale values are part of the Drive Data
   feature. To modify Neptune 3 UI's appearance or experience, you can update \c simulation.qml file
   and the \c drive-data.yaml file. These files are located in the \c drivedata folder.

   When you have made the changes you would like, you need to rebuild Neptune 3 UI for these changes
   to take effect.

*/
